import csv
import matplotlib.pyplot as plt
import numpy as np
from statistics import mean

# IMPORT SIGNAL A #

tA = [] # column 0
data1A = [] # column 1
# data2A = [] # column 2

with open('sigA.csv') as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        tA.append(float(row[0])) # leftmost column
        data1A.append(float(row[1])) # second column
        # data2A.append(float(row[2])) # third column

# for i in range(tA):
#     # print the data to verify it was read
#     # print(str(tA[i]) + ", " + str(data1A[i]) + ", " + str(data2A[i]))
#     print(str(tA[i]) + ", " + str(data1A[i]))

freqA = len(tA)/tA[-1]
print(f"Samp freq of Signal A: {freqA}")

# IMPORT SIGNAL B # 

tB = [] # column 0
data1B = [] # column 1
# data2B = [] # column 2

with open('sigB.csv') as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        tB.append(float(row[0])) # leftmost column
        data1B.append(float(row[1])) # second column
        # data2B.append(float(row[2])) # third column

# for i in range(tB):
#     # print the data to verify it was read
#     # print(str(tB[i]) + ", " + str(data1B[i]) + ", " + str(data2B[i]))
#     print(str(tB[i]) + ", " + str(data1B[i]))

freqB = len(tB)/tB[-1]
print(f"Samp freq of Signal B: {freqB}")

# IMPORT SIGNAL C #

tC = [] # column 0
data1C = [] # column 1
# data2C = [] # column 2

with open('sigC.csv') as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        tC.append(float(row[0])) # leftmost column
        data1C.append(float(row[1])) # second column
        # data2C.append(float(row[2])) # third column

# for i in range(tC):
#     # print the data to verify it was read
#     # print(str(tC[i]) + ", " + str(data1C[i]) + ", " + str(data2C[i]))
#     print(str(tC[i]) + ", " + str(data1C[i]))

freqC = len(tC)/tC[-1]
print(f"Samp freq of Signal C: {freqC}")

# IMPORT SIGNAL D #

tD = [] # column 0
data1D = [] # column 1
# data2D = [] # column 2

with open('sigD.csv') as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        tD.append(float(row[0])) # leftmost column
        data1D.append(float(row[1])) # second column
        # data2D.append(float(row[2])) # third column

# for i in range(tD):
#     # print the data to verify it was read
#     # print(str(tD[i]) + ", " + str(data1D[i]) + ", " + str(data2D[i]))
#     print(str(tD[i]) + ", " + str(data1D[i]))

freqD = len(tD)/tD[-1]
print(f"Samp freq of Signal D: {freqD}")

# analyze signal A

Fs = freqA # sample rate
Ts = 1.0/Fs; # sampling interval
ts = np.arange(0,tA[-1],Ts) # time vector
yA = data1A # the data to make the fft from
nA = len(yA) # length of the signal
kA = np.arange(nA)
TA = nA/Fs
frqA = kA/TA # two sides frequency range
frqA = frqA[range(int(nA/2))] # one side frequency range
YA = np.fft.fft(yA)/nA # fft computing and normalization
YA = YA[range(int(nA/2))]

# analyze signal B

Fs = freqB # sample rate
Ts = 1.0/Fs; # sampling interval
ts = np.arange(0,tB[-1],Ts) # time vector
yB = data1B # the data to make the fft from
nB = len(yB) # length of the signal
kB = np.arange(nB)
TB = nB/Fs
frqB = kB/TB # two sides frequency range
frqB = frqB[range(int(nB/2))] # one side frequency range
YB = np.fft.fft(yB)/nB # fft computing and normalization
YB = YB[range(int(nB/2))]

# analyze signal C

Fs = freqC # sample rate
Ts = 1.0/Fs; # sampling interval
ts = np.arange(0,tC[-1],Ts) # time vector
yC = data1C # the data to make the fft from
nC = len(yC) # length of the signal
kC = np.arange(nC)
TC = nC/Fs
frqC = kC/TC # two sides frequency range
frqC = frqC[range(int(nC/2))] # one side frequency range
YC = np.fft.fft(yC)/nC # fft computing and normalization
YC = YA[range(int(nC/2))]

# analyze signal D

Fs = freqD # sample rate
Ts = 1.0/Fs; # sampling interval
ts = np.arange(0,tD[-1],Ts) # time vector
yD = data1D # the data to make the fft from
nD = len(yD) # length of the signal
kD = np.arange(nD)
TD = nD/Fs
frqD = kD/TD # two sides frequency range
frqD = frqD[range(int(nD/2))] # one side frequency range
YD = np.fft.fft(yD)/nD # fft computing and normalization
YD = YD[range(int(nD/2))]

# FIR FILTER 

# coefficients

# for signal A
# h = [
#     0.001867519746044820,
#     0.002275293677911463,
#     0.002692845467883248,
#     0.003119400211540369,
#     0.003554151391578438,
#     0.003996262853518041,
#     0.004444870878876082,
#     0.004899086349965267,
#     0.005357997000181999,
#     0.005820669743355830,
#     0.006286153075466025,
#     0.006753479541784039,
#     0.007221668262275161,
#     0.007689727507889525,
#     0.008156657320192493,
#     0.008621452166627776,
#     0.009083103623574271,
#     0.009540603079249766,
#     0.009992944448431896,
#     0.010439126890909214,
#     0.010878157525543523,
#     0.011309054131818317,
#     0.011730847830767882,
#     0.012142585737226980,
#     0.012543333575412086,
#     0.012932178249941664,
#     0.013308230364524597,
#     0.013670626680692492,
#     0.014018532509122373,
#     0.014351144026291085,
#     0.014667690509420725,
#     0.014967436482914990,
#     0.015249683769748768,
#     0.015513773441556675,
#     0.015759087661469738,
#     0.015985051414072162,
#     0.016191134117190663,
#     0.016376851110586923,
#     0.016541765016997088,
#     0.016685486971350718,
#     0.016807677714403370,
#     0.016908048547430839,
#     0.016986362145057821,
#     0.017042433223728004,
#     0.017076129063764694,
#     0.017087369883420026,
#     0.017076129063764694,
#     0.017042433223728004,
#     0.016986362145057821,
#     0.016908048547430839,
#     0.016807677714403370,
#     0.016685486971350718,
#     0.016541765016997088,
#     0.016376851110586923,
#     0.016191134117190663,
#     0.015985051414072162,
#     0.015759087661469738,
#     0.015513773441556675,
#     0.015249683769748768,
#     0.014967436482914990,
#     0.014667690509420725,
#     0.014351144026291085,
#     0.014018532509122373,
#     0.013670626680692492,
#     0.013308230364524597,
#     0.012932178249941664,
#     0.012543333575412086,
#     0.012142585737226980,
#     0.011730847830767882,
#     0.011309054131818317,
#     0.010878157525543523,
#     0.010439126890909214,
#     0.009992944448431896,
#     0.009540603079249766,
#     0.009083103623574271,
#     0.008621452166627776,
#     0.008156657320192493,
#     0.007689727507889525,
#     0.007221668262275161,
#     0.006753479541784039,
#     0.006286153075466025,
#     0.005820669743355830,
#     0.005357997000181999,
#     0.004899086349965267,
#     0.004444870878876082,
#     0.003996262853518041,
#     0.003554151391578438,
#     0.003119400211540369,
#     0.002692845467883248,
#     0.002275293677911463,
#     0.001867519746044820,
# ]

# for signal B - 155 coeff
# h = [
#     -0.001616833689290544,
#     -0.001695859484127676,
#     -0.001770650189086350,
#     -0.001840414727663865,
#     -0.001904346067315391,
#     -0.001961624885972952,
#     -0.002011423413468856,
#     -0.002052909430324018,
#     -0.002085250405111920,
#     -0.002107617750451085,
#     -0.002119191176620947,
#     -0.002119163120845944,
#     -0.002106743229457434,
#     -0.002081162869429514,
#     -0.002041679645198594,
#     -0.001987581896223044,
#     -0.001918193150422623,
#     -0.001832876508461456,
#     -0.001731038933805724,
#     -0.001612135423599933,
#     -0.001475673035664769,
#     -0.001321214747325129,
#     -0.001148383122328415,
#     -0.000956863762808851,
#     -0.000746408524090862,
#     -0.000516838471100309,
#     -0.000268046556261937,
#     0.000000000000000001,
#     0.000287257643679525,
#     0.000593604752569032,
#     0.000918840247059302,
#     0.001262682559130263,
#     0.001624768970525079,
#     0.002004655329239949,
#     0.002401816151529873,
#     0.002815645114637362,
#     0.003245455943407589,
#     0.003690483691871348,
#     0.004149886418768069,
#     0.004622747253857311,
#     0.005108076849740444,
#     0.005604816211797333,
#     0.006111839896747798,
#     0.006627959568287008,
#     0.007151927896229541,
#     0.007682442783640987,
#     0.008218151904550235,
#     0.008757657533031061,
#     0.009299521642729732,
#     0.009842271254306081,
#     0.010384404006758953,
#     0.010924393927232486,
#     0.011460697372655657,
#     0.011991759115462091,
#     0.012516018544677109,
#     0.013031915952851062,
#     0.013537898878666839,
#     0.014032428474560573,
#     0.014513985868370521,
#     0.014981078487873039,
#     0.015432246317078423,
#     0.015866068053342668,
#     0.016281167134704910,
#     0.016676217607382124,
#     0.017049949804040593,
#     0.017401155804314120,
#     0.017728694650048428,
#     0.018031497288912898,
#     0.018308571221330252,
#     0.018559004827123981,
#     0.018781971349864458,
#     0.018976732518599323,
#     0.019142641788472609,
#     0.019279147183659411,
#     0.019385793728059160,
#     0.019462225451288066,
#     0.019508186959679596,
#     0.019523524564227731,
#     0.019508186959679596,
#     0.019462225451288066,
#     0.019385793728059160,
#     0.019279147183659411,
#     0.019142641788472609,
#     0.018976732518599323,
#     0.018781971349864458,
#     0.018559004827123981,
#     0.018308571221330252,
#     0.018031497288912898,
#     0.017728694650048428,
#     0.017401155804314120,
#     0.017049949804040593,
#     0.016676217607382124,
#     0.016281167134704910,
#     0.015866068053342668,
#     0.015432246317078423,
#     0.014981078487873039,
#     0.014513985868370521,
#     0.014032428474560573,
#     0.013537898878666839,
#     0.013031915952851062,
#     0.012516018544677109,
#     0.011991759115462091,
#     0.011460697372655657,
#     0.010924393927232486,
#     0.010384404006758953,
#     0.009842271254306081,
#     0.009299521642729732,
#     0.008757657533031061,
#     0.008218151904550235,
#     0.007682442783640989,
#     0.007151927896229541,
#     0.006627959568287008,
#     0.006111839896747798,
#     0.005604816211797333,
#     0.005108076849740444,
#     0.004622747253857313,
#     0.004149886418768069,
#     0.003690483691871348,
#     0.003245455943407589,
#     0.002815645114637362,
#     0.002401816151529873,
#     0.002004655329239949,
#     0.001624768970525079,
#     0.001262682559130263,
#     0.000918840247059302,
#     0.000593604752569032,
#     0.000287257643679525,
#     0.000000000000000001,
#     -0.000268046556261937,
#     -0.000516838471100309,
#     -0.000746408524090862,
#     -0.000956863762808851,
#     -0.001148383122328415,
#     -0.001321214747325129,
#     -0.001475673035664770,
#     -0.001612135423599933,
#     -0.001731038933805724,
#     -0.001832876508461456,
#     -0.001918193150422623,
#     -0.001987581896223044,
#     -0.002041679645198594,
#     -0.002081162869429514,
#     -0.002106743229457434,
#     -0.002119163120845944,
#     -0.002119191176620947,
#     -0.002107617750451085,
#     -0.002085250405111920,
#     -0.002052909430324018,
#     -0.002011423413468856,
#     -0.001961624885972950,
#     -0.001904346067315391,
#     -0.001840414727663865,
#     -0.001770650189086350,
#     -0.001695859484127676,
#     -0.001616833689290544,
# ]

# signal C - 155 coeff
# h = [
#     -0.001616833689290544,
#     -0.001695859484127676,
#     -0.001770650189086350,
#     -0.001840414727663865,
#     -0.001904346067315391,
#     -0.001961624885972952,
#     -0.002011423413468856,
#     -0.002052909430324018,
#     -0.002085250405111920,
#     -0.002107617750451085,
#     -0.002119191176620947,
#     -0.002119163120845944,
#     -0.002106743229457434,
#     -0.002081162869429514,
#     -0.002041679645198594,
#     -0.001987581896223044,
#     -0.001918193150422623,
#     -0.001832876508461456,
#     -0.001731038933805724,
#     -0.001612135423599933,
#     -0.001475673035664769,
#     -0.001321214747325129,
#     -0.001148383122328415,
#     -0.000956863762808851,
#     -0.000746408524090862,
#     -0.000516838471100309,
#     -0.000268046556261937,
#     0.000000000000000001,
#     0.000287257643679525,
#     0.000593604752569032,
#     0.000918840247059302,
#     0.001262682559130263,
#     0.001624768970525079,
#     0.002004655329239949,
#     0.002401816151529873,
#     0.002815645114637362,
#     0.003245455943407589,
#     0.003690483691871348,
#     0.004149886418768069,
#     0.004622747253857311,
#     0.005108076849740444,
#     0.005604816211797333,
#     0.006111839896747798,
#     0.006627959568287008,
#     0.007151927896229541,
#     0.007682442783640987,
#     0.008218151904550235,
#     0.008757657533031061,
#     0.009299521642729732,
#     0.009842271254306081,
#     0.010384404006758953,
#     0.010924393927232486,
#     0.011460697372655657,
#     0.011991759115462091,
#     0.012516018544677109,
#     0.013031915952851062,
#     0.013537898878666839,
#     0.014032428474560573,
#     0.014513985868370521,
#     0.014981078487873039,
#     0.015432246317078423,
#     0.015866068053342668,
#     0.016281167134704910,
#     0.016676217607382124,
#     0.017049949804040593,
#     0.017401155804314120,
#     0.017728694650048428,
#     0.018031497288912898,
#     0.018308571221330252,
#     0.018559004827123981,
#     0.018781971349864458,
#     0.018976732518599323,
#     0.019142641788472609,
#     0.019279147183659411,
#     0.019385793728059160,
#     0.019462225451288066,
#     0.019508186959679596,
#     0.019523524564227731,
#     0.019508186959679596,
#     0.019462225451288066,
#     0.019385793728059160,
#     0.019279147183659411,
#     0.019142641788472609,
#     0.018976732518599323,
#     0.018781971349864458,
#     0.018559004827123981,
#     0.018308571221330252,
#     0.018031497288912898,
#     0.017728694650048428,
#     0.017401155804314120,
#     0.017049949804040593,
#     0.016676217607382124,
#     0.016281167134704910,
#     0.015866068053342668,
#     0.015432246317078423,
#     0.014981078487873039,
#     0.014513985868370521,
#     0.014032428474560573,
#     0.013537898878666839,
#     0.013031915952851062,
#     0.012516018544677109,
#     0.011991759115462091,
#     0.011460697372655657,
#     0.010924393927232486,
#     0.010384404006758953,
#     0.009842271254306081,
#     0.009299521642729732,
#     0.008757657533031061,
#     0.008218151904550235,
#     0.007682442783640989,
#     0.007151927896229541,
#     0.006627959568287008,
#     0.006111839896747798,
#     0.005604816211797333,
#     0.005108076849740444,
#     0.004622747253857313,
#     0.004149886418768069,
#     0.003690483691871348,
#     0.003245455943407589,
#     0.002815645114637362,
#     0.002401816151529873,
#     0.002004655329239949,
#     0.001624768970525079,
#     0.001262682559130263,
#     0.000918840247059302,
#     0.000593604752569032,
#     0.000287257643679525,
#     0.000000000000000001,
#     -0.000268046556261937,
#     -0.000516838471100309,
#     -0.000746408524090862,
#     -0.000956863762808851,
#     -0.001148383122328415,
#     -0.001321214747325129,
#     -0.001475673035664770,
#     -0.001612135423599933,
#     -0.001731038933805724,
#     -0.001832876508461456,
#     -0.001918193150422623,
#     -0.001987581896223044,
#     -0.002041679645198594,
#     -0.002081162869429514,
#     -0.002106743229457434,
#     -0.002119163120845944,
#     -0.002119191176620947,
#     -0.002107617750451085,
#     -0.002085250405111920,
#     -0.002052909430324018,
#     -0.002011423413468856,
#     -0.001961624885972950,
#     -0.001904346067315391,
#     -0.001840414727663865,
#     -0.001770650189086350,
#     -0.001695859484127676,
#     -0.001616833689290544,
# ]

# signal D - 61 coeff
h = [
    0.007998413154141100,
    0.006114024716856802,
    0.003745108626987747,
    0.000986096961163599,
    -0.002041734087676173,
    -0.005194452007655058,
    -0.008310889915836435,
    -0.011219093450939925,
    -0.013743529831266128,
    -0.015712753856232421,
    -0.016967196540074565,
    -0.017366727946362147,
    -0.016797647571547489,
    -0.015178773492448120,
    -0.012466334873754630,
    -0.008657420012758413,
    -0.003791791877112884,
    0.002048047534724419,
    0.008738586796304766,
    0.016118792435349773,
    0.023995239462423306,
    0.032148696103460807,
    0.040341907081746252,
    0.048328263816163120,
    0.055861007317392707,
    0.062702582429884857,
    0.068633751739100662,
    0.073462084523907137,
    0.077029460364075611,
    0.079218267398247319,
    0.079956030003468626,
    0.079218267398247319,
    0.077029460364075611,
    0.073462084523907137,
    0.068633751739100662,
    0.062702582429884857,
    0.055861007317392707,
    0.048328263816163120,
    0.040341907081746252,
    0.032148696103460807,
    0.023995239462423306,
    0.016118792435349773,
    0.008738586796304766,
    0.002048047534724419,
    -0.003791791877112884,
    -0.008657420012758413,
    -0.012466334873754630,
    -0.015178773492448120,
    -0.016797647571547489,
    -0.017366727946362147,
    -0.016967196540074565,
    -0.015712753856232421,
    -0.013743529831266128,
    -0.011219093450939925,
    -0.008310889915836435,
    -0.005194452007655058,
    -0.002041734087676173,
    0.000986096961163599,
    0.003745108626987747,
    0.006114024716856802,
    0.007998413154141100,
]

buffer = []
buffer_wt = []
filtered = []
for index, data in enumerate(data1D):
    if index < 60:
        buffer.append(data)
    if index >= 60:
        buffer.append(data)
        for index, data in enumerate(buffer):
            buffer_wt.append(data*h[index])
        sum_buff = sum(buffer)
        filtered.append(sum_buff)
        buffer.pop(0)

# FFT of filtered

Fs = freqD # sample rate
Ts = 1.0/Fs; # sampling interval
# ts = np.arange(0,tD[-1],Ts) # time vector
yF = filtered # the data to make the fft from
nF = len(yF) # length of the signal
kF = np.arange(nF)
TF = nF/Fs
frqF = kF/TF # two sides frequency range
frqF = frqF[range(int(nF/2))] # one side frequency range
YF = np.fft.fft(yF)/nF # fft computing and normalization
YF = YF[range(int(nF/2))]

plt.figure()
plt.loglog(frqD,abs(YD),'black')
plt.loglog(frqF,abs(YF),'red')
plt.xlabel('Freq (Hz)')
plt.ylabel('|Y(freq)|')
plt.title("Signal D FFT Before/After Filtering (15 Hz Fc, 6 Hz bl, Rect Window)")
plt.legend(["Unfiltered", "Filtered"])

plt.show()